#!/usr/bin/env ruby

require 'aws_log_cleaner'
require 'colorize'

USAGE = <<ENDUSAGE.freeze
  Usage:
    aws_log_cleaner [-h] ([-p] or [-a]) [-o] [-r region] [-l like]
ENDUSAGE

HELP = <<ENDHELP.freeze
   -h,  --help       Show this help.
   -p,  --plan       Runs the plan command.
   -a,  --apply      Applys the deletion. Preview what will be deleted with [-p]
   -l,  --like       The search term returned logs should contain.
   -r,  --region     The region to run in.
   -k,  --access_key The access key to use for AWS.
   -s,  --secret     The secret to use for AWS.
   -P,  --profile    The profile to use for AWS Credentials.
   -o,  --orphan     Clean orphan logs.
   -v,  --version    Print version.
ENDHELP

args = { region: nil, access_key: nil, secret: nil }
unflagged_args = []
next_arg = unflagged_args.first
ARGV.each do |arg|
  case arg
  when '-h', '--help'       then args[:help]      = true
  when '-p', '--plan'       then args[:plan]      = true
  when '-a', '--apply'      then args[:delete]    = true
  when '-o', '--orphan'     then args[:orphan]    = true
  when '-v', '--version'    then args[:version]   = true
  when '-l', '--like'       then next_arg         = :like
  when '-r', '--region'     then next_arg         = :region
  when '-k', '--access_key' then next_arg         = :access_key
  when '-s', '--secret'     then next_arg         = :secret
  when '-P', '--profile'    then next_arg         = :profile
  else
    if next_arg
      args[next_arg] = arg
      unflagged_args.delete(next_arg)
    end
    next_arg = unflagged_args.first
  end
end

if args[:version]
  puts AwsLogCleaner::VERSION
  exit
end

if args[:help] || (!args[:plan] && !args[:delete])
  puts USAGE
  puts HELP
  exit
end

credentials_args =
  if args[:access_key] && args[:secret]
    {
      access_key: args[:access_key],
      secret: args[:secret]
    }
  elsif args[:profile]
    {
      profile: args[:profile]
    }
  end

credentials_args[:region] = args[:region] unless args[:region].nil?

log_cleaner = \
  AwsLogCleaner::AwsLogCleaner.new(credentials_args, args[:like], args[:orphan])

if args[:plan]
  puts "== PLAN MODE ==\n\n"
  result = log_cleaner.plan
  puts "Found #{result.count} item(s) to remove\n\n"
elsif args[:delete] && !args[:plan]
  puts "== DELETE MODE ==\n\n"
  result = log_cleaner.delete
  puts "Deleted #{result.count} item(s)\n\n"
end

result.each do |item|
  puts item.to_s.red
end
